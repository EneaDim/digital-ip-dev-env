// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pwm_ramp_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 4;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } setting;
    struct packed {
      logic        q;
    } rst;
    struct packed {
      logic        q;
    } en;
  } pwm_ramp_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        re;
    } empty;
    struct packed {
      logic        q;
      logic        re;
    } full;
  } pwm_ramp_reg2hw_status_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        re;
  } pwm_ramp_reg2hw_rdata_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        qe;
  } pwm_ramp_reg2hw_wdata_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } full;
    struct packed {
      logic        d;
    } empty;
  } pwm_ramp_hw2reg_status_reg_t;

  typedef struct packed {
    logic [7:0]  d;
  } pwm_ramp_hw2reg_rdata_reg_t;

  // Register -> HW type
  typedef struct packed {
    pwm_ramp_reg2hw_ctrl_reg_t ctrl; // [39:22]
    pwm_ramp_reg2hw_status_reg_t status; // [21:18]
    pwm_ramp_reg2hw_rdata_reg_t rdata; // [17:9]
    pwm_ramp_reg2hw_wdata_reg_t wdata; // [8:0]
  } pwm_ramp_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    pwm_ramp_hw2reg_status_reg_t status; // [9:8]
    pwm_ramp_hw2reg_rdata_reg_t rdata; // [7:0]
  } pwm_ramp_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PWM_RAMP_CTRL_OFFSET = 4'h 0;
  parameter logic [BlockAw-1:0] PWM_RAMP_STATUS_OFFSET = 4'h 4;
  parameter logic [BlockAw-1:0] PWM_RAMP_RDATA_OFFSET = 4'h 8;
  parameter logic [BlockAw-1:0] PWM_RAMP_WDATA_OFFSET = 4'h c;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] PWM_RAMP_STATUS_RESVAL = 2'h 0;
  parameter logic [7:0] PWM_RAMP_RDATA_RESVAL = 8'h 0;

  // Register index
  typedef enum int {
    PWM_RAMP_CTRL,
    PWM_RAMP_STATUS,
    PWM_RAMP_RDATA,
    PWM_RAMP_WDATA
  } pwm_ramp_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PWM_RAMP_PERMIT [4] = '{
    4'b 1111, // index[0] PWM_RAMP_CTRL
    4'b 0001, // index[1] PWM_RAMP_STATUS
    4'b 0001, // index[2] PWM_RAMP_RDATA
    4'b 0001  // index[3] PWM_RAMP_WDATA
  };

endpackage
